@page "/Stats"
@using  mamun_SchoolApp.Data.EFCore
@using  mamun_SchoolApp.Models
@inject mamun_SchoolApp.Data.EFCore.EfCoreStudentsRepository studentsRepository
@inject mamun_SchoolApp.Data.EFCore.EfCoreClassesRepository classesRepository
@inject mamun_SchoolApp.Data.EFCore.EfCoreCountriesRepository countriesRepository
@using System
@using System.Text




@code{

        //private Models.Students student = new Models.Students();
        //private Models.Classes cl4ss = new Models.Classes();
    private List<Models.Classes> classes = new List<Models.Classes>();
    private List<Models.Students> students = new List<Models.Students>();
    private List<Models.Countries> countries = new List<Models.Countries>();

    private string statResult;


    protected override async Task OnInitializedAsync()
    {
        classes = await Task.Run(() => classesRepository.GetAll());
        students = await Task.Run(() => studentsRepository.GetAll());
        countries = await Task.Run(() => countriesRepository.GetAll());
    }

    private string StudentsCountPerClass()
    {
        String result = String.Empty;
        //var studentByClass =
        //    from s in students
        //    group s by s.ClassId into sGroup
        //    select new
        //    {
        //        Class = sGroup.Key,
        //        Count = sGroup.Count(),
        //    };


        //var joinStudentClass = students.Join(// outer sequence
        //              classes,  // inner sequence
        //              student => student.ClassId,    // outerKeySelector
        //              classes => classes.Id,  // innerKeySelector
        //              (students, classes) => new  // result selector
        //              {
        //                  StudentName = students.name,
        //                  ClassName = classes.class_name
        //              });


        var studentByClass = from c in classes
                             join s in students on c equals s.Class into studentsInClass
                             select new
                             {
                                 ClassName = c.class_name,
                                 StudentCount = studentsInClass.Count()

                             };

        foreach (var grp in studentByClass)
        {
            result += "<tr>";
            result += "<td>" + grp.ClassName + "</td>";
            result += "<td>" + grp.StudentCount + "</td>";
            result += "</tr>";
        }
        return result;
    }

    private string StudentsCountPerCountry()
    {
        StringBuilder result2 = new StringBuilder();
        var studentByCountry = from c in countries
                               join s in students on c equals s.Country into studentsInCountry
                               select new
                               {
                                   CountryName = c.name,
                                   StudentCount = studentsInCountry.Count()

                               };

        foreach (var grp in studentByCountry)
        {
            result2.Append("<tr>");
            result2.Append("<td>" + grp.CountryName + "</td>");
            result2.Append("<td>" + grp.StudentCount + "</td>");
            result2.Append("</tr>");
        }
        return result2.ToString();

    }

    private string AverageAgeOfStudents()
    {
        double avgAge = students
            .Average(x => (DateTime.Now - x.date_of_birth).TotalDays) / 365;
        return avgAge.ToString();
    }

    private string StudentsDOB()
    {
        StringBuilder result3 = new StringBuilder();
        var studentAges = students
        .Select(x => (DateTime.Now - x.date_of_birth).TotalDays);

        //foreach (var grp in studentAges)
        //{
        //    result2.Append("<tr>");
        //    result2.Append("<td>" + Double.Parse(grp.ToString())/365 + "</td>");

        //    result2.Append("</tr>");
        //}
        double totalYrs = 0.0;
        foreach (var grp in studentAges)
        {
            totalYrs += Double.Parse(grp.ToString())/365;

        }
        result3.Append("<tr>");
        result3.Append("<td>" + totalYrs / studentAges.Count() + "</td>");

        result3.Append("</tr>");

        return result3.ToString();
    }

}


<h1>mamun school app</h1>

<label>Statistics</label>
<br />
<label>Count of students per class</label>
<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Class</th>
            <th>Student Count</th>
        </tr>
    </thead>
    <tbody>
        @( (MarkupString)@StudentsCountPerClass())
    </tbody>
</table>
<br />
<br />
<label>Count of students per country</label>
<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Country</th>
            <th>Student Count</th>
        </tr>
    </thead>
    <tbody>
        @( (MarkupString)@StudentsCountPerCountry())
    </tbody>
</table>
<br />
<br />
<label>Average Age</label>
<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Average Age</th>
        </tr>
    </thead>
    <tbody>
        @( (MarkupString)@StudentsDOB())
    </tbody>
</table>





