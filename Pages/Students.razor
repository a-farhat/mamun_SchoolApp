@page "/Students"
@using  mamun_SchoolApp.Data.EFCore
@using  mamun_SchoolApp.Models
@inject mamun_SchoolApp.Data.EFCore.EfCoreStudentsRepository studentsRepository


@code{

    private Models.Students student = new Models.Students();
    private List<Models.Students> students = new List<Models.Students>();




    protected override async Task OnInitializedAsync()
    {
        students = await Task.Run(() => studentsRepository.GetAll());

    }


    private async Task LoadItems()
    {
        List<Models.Students> students = new List<Models.Students>();
        students = await Task.Run(() => studentsRepository.GetAll());
    }

    private async Task GetItem(int id)
    {
        //Models.Students student = new Models.Students();
        student = await Task.Run(() => studentsRepository.Get(id));

    }

    private async Task DeleteItem(int id)
    {
        await Task.Run(() => studentsRepository.Delete(id));
        await LoadItems();
    }

    private async Task SaveItem()
    {
        if (student.Id == 0)
            student = await studentsRepository.Add(student);
        else student = await studentsRepository.Update(student);

        student = new Models.Students();

        await LoadItems();
    }


    private void SetItemValue(Models.Students student)
    {
        this.student = student;
    }

    //private async Task StudentsCountPerClass()
    //{
    //    List<Models.Students> students = new List<Models.Students>();
    //    students = await Task.Run(() => studentsRepository.GetAll());

    //    string result = String.Empty;
    //    var studentByClass = from s in students
    //                         group s by s.ClassId;

    //    foreach (var grp in studentByClass)
    //    {
    //        result += "<tr>"  +grp.Key+ "</tr>"; //Each group has a key 

    //        foreach (Models.Students s in grp) // Each group has inner collection
    //            result += "<td>"  +s.name+  "</td>";
    //    }

    //    result += "<tbody>" + result + "</tbody>";


    //}

}
}


<h1>mamun school app</h1>


<input type="text" @bind-value="@student.Id" />
<br />
<br />
<input type="text" @bind-value="@student.name" />
<br />
<br />
<input type="text" @bind-value="@student.date_of_birth" />
<br />
<br />
<input type="text" @bind-value="@student.ClassId" />
<br />
<br />
<input type="text" @bind-value="@student.CountryId" />

<button class="btn btn-success" @onclick="@(e=>SaveItem())">Save</button>

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>id</th>
            <th>name</th>
            <th>DOB</th>
            <th>Class</th>
            <th>Country</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Models.Students student in students)
        {
            <tr>
                <td>@student.Id</td>
                <td>@student.name</td>
                <td>@student.date_of_birth</td>
                <td>@student.ClassId</td>
                <td>@student.CountryId</td>

                <td>
                    <button class="btn btn-primary" @onclick="@(e=>GetItem(@student.Id))">Edit</button>
                    <button class="btn btn-danger" @onclick="@(e=>DeleteItem(@student.Id))">Delete</button>
                </td>
            </tr>
        }
       
    </tbody>
</table>



